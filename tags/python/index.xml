<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Abnormally distributed</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Abnormally distributed</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>jarvm@umich.edu (Jarvis Miller)</managingEditor>
    <webMaster>jarvm@umich.edu (Jarvis Miller)</webMaster>
    <lastBuildDate>Thu, 28 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dragging and clicking</title>
      <link>/2017/12/28/dragging-and-clicking/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      <author>jarvm@umich.edu (Jarvis Miller)</author>
      <guid>/2017/12/28/dragging-and-clicking/</guid>
      <description>I forced myself to get rid of Windows after starting grad school. I read plenty of blogs and whatnot explaining why not relying on your mouse (point, click, drag) could make you much more productive while working as a data scientist. I thought only Software Engineers (SWEs) did stuff like that and coding in whatever the heck emacs or vim is. Regardless, I decided to give it a try. Switched to Ubuntu.</description>
    </item>
    
    <item>
      <title>Building a crappy personalized song recommender</title>
      <link>/2017/12/08/building-a-crappy-personalized-song-recommender/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      <author>jarvm@umich.edu (Jarvis Miller)</author>
      <guid>/2017/12/08/building-a-crappy-personalized-song-recommender/</guid>
      <description>Note: if you wanna skip straight to the repository, it&amp;rsquo;s here.
This semester I learned about utilizing APIs and Oauth2 to get data from web services. Time to put this into the test and do something cool - build a crappy song recommender. Here are the steps I followed after some brainstorming. Shoutout to Spotify for having nice data about each song.
 Ask for several artists that you vibe to Via Spotify, get a few related artists for each artist that the user input Get all albums for each artist as well as their songs get song features for each song (valence/musical positiveness, tempo, danceability, speechiness, energy) Via Genius&amp;rsquo;s API, search for that song and artist combo for each song and get the song&amp;rsquo;s lyrics calculate the sentiment of those lyrics store it all in two database tables, one for songs and one for artists  Now that I have the data, how should I go about recommending songs?</description>
    </item>
    
    <item>
      <title>Understanding OAuth</title>
      <link>/2017/11/06/understanding-oauth/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      <author>jarvm@umich.edu (Jarvis Miller)</author>
      <guid>/2017/11/06/understanding-oauth/</guid>
      <description>I should definitely finish the other parts of the NN posts, but here is a brief detour into OAuth (Open Authorization). Note that I am still a novice and so there might be explanations that are missing information or lacking depth. But this is a way for me to synthesize what I know, so please message me if there are any mistakes!
So what is the point of OAuth? As I’ve seen it, it’s a way for web services or apps to exchange information without compromising the people using apps.</description>
    </item>
    
    <item>
      <title>GSOC III</title>
      <link>/2017/06/23/gsoc-iii/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      <author>jarvm@umich.edu (Jarvis Miller)</author>
      <guid>/2017/06/23/gsoc-iii/</guid>
      <description>This week was a busy one. Implemented most of the survey summary statistics and the jackknife to estimate their standard error. This was my first time learning about the jackknife and I thought it was an interesting topic to tell you all about. Within survey data, you tend to have strata and PSUs within the strata that make up subgroups. Now, let&amp;rsquo;s assume that we want to calculate the mean for your survey data - this entails something along the lines of</description>
    </item>
    
    <item>
      <title>GSOC II</title>
      <link>/2017/06/15/gsoc-ii/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      <author>jarvm@umich.edu (Jarvis Miller)</author>
      <guid>/2017/06/15/gsoc-ii/</guid>
      <description>Another blog post about my journey with GSOC. This week I&amp;rsquo;m implementing some summary statistics for survey data. Surrvey methodology quite resembles ordinary statistical methodology, but there are some pervasive subtleties there due to the importance of the study design for doing standard errors, tests and confidence intervals in a defensible manner. Learning what others have done to make robust analyses with their survey data is quite fun. The hard part is of course the implementation.</description>
    </item>
    
    <item>
      <title>GSOC I</title>
      <link>/2017/05/09/gsoc-i/</link>
      <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
      <author>jarvm@umich.edu (Jarvis Miller)</author>
      <guid>/2017/05/09/gsoc-i/</guid>
      <description>This summer I&amp;rsquo;ll be working on implementing Survey Methods in StatsModels thanks to Google Summer of Code (GSOC). I&amp;rsquo;m excited because I took my first official programming course last semester (C++ seems to stand strong against the test of time) and get to learn more about open source software development.
I still remember the first programming course I signed up for during my freshman year at Rice. I dropped after the first week.</description>
    </item>
    
  </channel>
</rss>